#!/usr/bin/env node
require('dotenv').config();

const http = require('http');
const app = require('../api');
const { logger } = require('../lib/logger');

const port = process.env.PORT ?? 3000;
const environment = process.env.NODE_ENV ?? 'development';
app.set('port', port);

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {
  if (environment !== 'production'
    && environment !== 'development'
    && environment !== 'testing') {
    logger.error(`NODE_ENV is set to ${environment}, but only production and development are valid.`);
    process.exit(1);
  }
});

server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      break;
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      break;
    default:
      throw error;
  }
  process.exit(1);
});

server.on('listening', () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  logger.debug(`Listening on ${bind}`);
});

process.on('uncaughtException', (err) => {
  logger.error('Unexpected Error:', err);
  process.exit(1);
});

if (environment !== 'testing') {
  // Graceful-shutdown only in production or staging
  process.on('SIGINT', () => {
    logger.info('SIGINT signal received.');
    server.close(() => {
      logger.info('server closed...');
      process.exit(0);
    });
  });
}
